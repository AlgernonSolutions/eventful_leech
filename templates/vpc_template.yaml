AWSTemplateFormatVersion: 2010-09-09
Transform:
  - 'AWS::Serverless-2016-10-31'
Parameters:
  BucketName:
    Type: String
    Description: the arn of the bucket to be used to hold VPC traffic logs
  VpcCidr:
    Type: String
    Description: Cidr Block of VPC
    Default: 172.31.0.0/16
Resources:
  Vpc:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}_VPC'
  FirstSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt Vpc.CidrBlock, 6, 12 ]]
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}_private_subnet_1'
  SecondSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt Vpc.CidrBlock, 6, 12 ]]
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}_private_subnet_2'
  ThirdSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt Vpc.CidrBlock, 6, 12 ]]
      AvailabilityZone: !Select [ 2, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}_private_subnet_3'
  FourthSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt Vpc.CidrBlock, 6, 12 ]]
      AvailabilityZone: !Select [ 3, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}_private_subnet_4'
  FifthSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 4, !Cidr [ !GetAtt Vpc.CidrBlock, 6, 12 ]]
      AvailabilityZone: !Select [ 4, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}_private_subnet_5'
  SixthSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 5, !Cidr [ !GetAtt Vpc.CidrBlock, 6, 12 ]]
      AvailabilityZone: !Select [ 5, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}_private_subnet_6'
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}_route_table'
  FirstSnRouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref FirstSubnet
  SecondSnRouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref SecondSubnet
  ThirdSnRouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref ThirdSubnet
      RouteTableId: !Ref RouteTable
  FourthSnRouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref FourthSubnet
      RouteTableId: !Ref RouteTable
  FifthSnRouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref FifthSubnet
      RouteTableId: !Ref RouteTable
  SixthSnRouteAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SixthSubnet
      RouteTableId: !Ref RouteTable
  LambdaSg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AWS::StackName}_lambda_sg'
      GroupDescription: security group allowing lambda functions access to VPC resources
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: !Ref VpcCidr
  FlowLog:
    Type: 'AWS::EC2::FlowLog'
    Properties:
      ResourceId: !Ref Vpc
      ResourceType: VPC
      LogDestination: !Sub 'arn:aws:s3:::${BucketName}/vpc_flow_logs/'
      LogDestinationType: s3
      TrafficType: ALL
  SecretManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref LambdaSg
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      SubnetIds:
        - !Ref FirstSubnet
        - !Ref SecondSubnet
        - !Ref ThirdSubnet
        - !Ref FourthSubnet
        - !Ref FifthSubnet
        - !Ref SixthSubnet
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
  SsmEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref LambdaSg
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.ssm'
      SubnetIds:
        - !Ref FirstSubnet
        - !Ref SecondSubnet
        - !Ref ThirdSubnet
        - !Ref FourthSubnet
        - !Ref FifthSubnet
        - !Ref SixthSubnet
      VpcEndpointType: Interface
      VpcId: !Ref Vpc
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref RouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !Ref Vpc
  DynamoEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref RouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcEndpointType: Gateway
      VpcId: !Ref Vpc