AWSTemplateFormatVersion: 2010-09-09
Transform:
  - 'AWS::Serverless-2016-10-31'
Parameters:
  ExtractionBucketName:
    Type: String
    Description: name of the bucket used to hold extracted data
  ExtractionTransformationFnName:
    Type: String
    Description: name of the lambda function used to marshal extracted data to the correct form
  S3DefaultKeyId:
    Type: String
    Description: the id_value for the underlying aws/s3 key
Resources:
  ExtractionFireHose:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub '${AWS::StackName}_extraction'
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !Sub "arn:aws:s3:::${ExtractionBucketName}"
        BufferingHints:
          IntervalInSeconds: 150
          SizeInMBs: 5
        EncryptionConfiguration:
            KMSEncryptionConfig:
                AWSKMSKeyARN: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${S3DefaultKeyId}"
        ProcessingConfiguration:
          Enabled: true
          Processors:
            Type: Lambda
            Parameters:
              - ParameterName: LambdaArn
                ParamterValue: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ExtractionTransformationFnName}:$LATEST"
        S3BackupConfiguration:
          BucketARN: !Sub "arn:aws:s3:::${ExtractionBucketName}"
          BufferingHints:
            IntervalInSeconds: 150
            SizeInMBs: 5
          EncryptionConfiguration:
            KMSEncryptionConfig:
              AWSKMSKeyARN: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${S3DefaultKeyId}"
          Prefix: extractions_backup/
          RoleARN: !GetAtt ExtractionFireHoseRole.Arn
        S3BackupMode: Enabled
        ErrorOutputPrefix: firehose_errors/extractions/
        Prefix: extractions/
        RoleARN: !GetAtt ExtractionFireHoseRole.Arn
  ExtractionFireHoseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "firehose.amazonaws.com"
            Action:
              - "sts:AssumeRole"
            Condition:
              StringEquals:
                sts:ExternalId: !Ref AWS::AccountId
        Path: "/"
      RoleName: !Sub '${AWS::StackName}_extraction_fire_hose_role'
  ExtractionFireHosePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument: {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Sid": "",
            "Effect": "Allow",
            "Action": [
              "glue:GetTableVersions"
            ],
            "Resource": "*"
          },
          {
            "Sid": "",
            "Effect": "Allow",
            "Action": [
              "s3:AbortMultipartUpload",
              "s3:GetBucketLocation",
              "s3:GetObject",
              "s3:ListBucket",
              "s3:ListBucketMultipartUploads",
              "s3:PutObject"
            ],
            "Resource": [
              !Sub "arn:aws:s3:::${ExtractionBucketName}",
              !Sub "arn:aws:s3:::${ExtractionBucketName}/*"
            ]
          },
          {
            "Sid": "",
            "Effect": "Allow",
            "Action": [
              "lambda:InvokeFunction",
              "lambda:GetFunctionConfiguration"
            ],
            "Resource": !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ExtractionTransformationFnName}:$LATEST"
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:GenerateDataKey",
              "kms:Decrypt"
            ],
            "Resource": [
              !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${S3DefaultKeyId}"
            ],
            "Condition": {
              "StringEquals": {
                "kms:ViaService": !Sub "s3.${AWS::Region}.amazonaws.com"
              },
              "StringLike": {
                "kms:EncryptionContext:aws:s3:arn": [
                  "arn:aws:s3:::${ExtractionBucketName}/extractions/*",
                  "arn:aws:s3:::${ExtractionBucketName}/firehose_errors/extractions/*"
                ]
              }
            }
          },
          {
            "Sid": "",
            "Effect": "Allow",
            "Action": [
              "logs:PutLogEvents"
            ],
            "Resource": [
              !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/extractions:log-stream:*"
            ]
          },
          {
            "Sid": "",
            "Effect": "Allow",
            "Action": [
              "kinesis:DescribeStream",
              "kinesis:GetShardIterator",
              "kinesis:GetRecords"
            ],
            "Resource": !GetAtt ExtractionFireHose.Arn
          },
          {
            "Effect": "Allow",
            "Action": [
              "kms:Decrypt"
            ],
            "Resource": [
              !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${S3DefaultKeyId}"
            ],
            "Condition": {
              "StringEquals": {
                "kms:ViaService": "kinesis.${AWS::Region}.amazonaws.com"
              },
              "StringLike": {
                "kms:EncryptionContext:aws:kinesis:arn": !GetAtt ExtractionFireHose.Arn
              }
            }
          }
          ]

      }
      PolicyName: !Sub '${AWS::StackName}_extraction_fire_hose_policy'
      Roles:
        - !Ref ExtractionFireHoseRole
